# 1) WAP to print first n natural numbers (input n from user)
#

myNum = int(input("enter the number ..:"))
i = 0

# TYpe -1
while i <= myNum :
    print( i)
    i += 1
    
# TYpe -2    
for n in range(0,myNum+1 ,1):
    print( n )
	
	
	
# 2) WAP to find sum of first n natural numbers
# ===========================================

myNum = int(input("enter the number ..:"))
 

def sumofNaturals(n):
    sum=0 
    for i in range(1, n+1 ,1):
        sum = sum + i
        print ('sum=',  sum)
    return sum

mySum = sumofNaturals(myNum)
print(mySum)



# 3) WAP to print first n natural numbers in reverse order.
# =============================================================

myNum = int(input("enter the number ..:"))

def printInReverse(n):
    for i in range(n, 0 , -1):
        print (i)
printInReverse(myNum)



# 4) WAP to input a number and print its factorial.
# ================================================

num = int(input("enter the number ..:"))

def factorial(n):
    if n == 1:
        return n
    else :
        return n * factorial(n-1)
    
if num == 0 :
    print("factorial is = ", 1)
elif num < 0 :
    print('factorial is not allowed for -ves')
else :
    sol= factorial(num)
    print(sol)




# 5)  WAP to print Fibonacci sequence till n.
# =========================================

n = int(input("enter the Number :") )
old =0
new =1
fabo = [0, 1 ]
while (new + old) < n : 
    old, new = new, old+new
    fabo.append(new)
    #print ("tracing ...:",old, new)
    
print(fabo)


# 6) WAP to print all digits of a number input from user
# ===============================
num = input("enter the number ..:")
lst = list(num)
print(lst)


# 7) WAP to find sum of all digits of a number.
# ===============================================
num = input("enter the number ..:")
lst = list(num)
res = 0
for item in lst:
    res += int(item)
print(res)



# 8) WAP to find sum of following series given n as input from user
#     1 + 2! + 3! + 4! + 5! + â€¦.n!
# ===================================================

num = int(input("enter the number ..:"))

def myfact(n):
    temp =1
    if n == 1:
        return n
    else :
        n= n * myfact(n-1)
        print("def trace..:" , n)
        return n
 
res = 0 
for i in range (num, 1,-1):
    res = res + myfact(i)    
print(res)



# 9) WAP to input base and exponent and print result without using inbuilt function pow(use for or while loop).
# =======================================================================
inp = int(input("Enter the NUmber :" ))
exp = int(input("Enter the Exponential or Power of :" ) )

def genRes(n, e) :
    result = 1
    for i in range(1, e+1):
        result = result * n
    print(result)
    
genRes( inp, exp)    


# 10a) Print following patterns
# *
# * *
# * * *
# * * * *
# * * * * *
#======================================

numRows = int(input("Enter the Number of Rows in the pattern :" ))

for i in range (1, numRows+1 ):
    cnt = 1
    rowStr = ""
    while  cnt <= i:
        rowStr = rowStr + '*'
        cnt += 1
    print (rowStr)



# 10b) Print following patterns

# * * * * *
# * * * *
# * * *
# * *
# * 
#======================================

numRows = int(input("Enter the Number of Rows in the pattern :" ))

for i in range ( numRows, 0 , -1):
    cnt = 1
    rowStr = ""
    while  cnt <= i:
        rowStr = rowStr + '*'
        cnt += 1
    print (rowStr)


# 10c) Print following patterns

#         *
#       * *
#     * * *
#   * * * *
# * * * * *
#======================================

numRows = int(input("Enter the Number of Rows in the pattern :" ))
str1  = ""
emptyStr = list()

for a in range( numRows+1 ):
    emptyStr.append(" ")

for i in range (1, numRows+1 ):
    for j in range (numRows, numRows - i, -1 ):
        emptyStr[j-1] =  '*'
    print(str1.join(emptyStr))


	